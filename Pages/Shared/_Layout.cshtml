<!DOCTYPE html>

<html>
<head>
    <script defer src="~/js/moment.min.js"></script>
    <script defer src="/css/all.js"></script> <!--load all styles -->


    <link rel="stylesheet" type="text/css" href="~/css/flaticon/flaticon.css">
    @*<link href="~/css/flaticon/flaticon.css" rel="stylesheet" />*@
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="">
    <meta name="author" content="">


    <title>STOCK JESS PG</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />

    @* Uncomment to use the HtmlEditor control *@
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.6/quill.min.js"></script> *@


    <link rel="stylesheet" href="~/css/vendor.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/Site.css" />
    <script src="~/js/vendor.js" asp-append-version="true"></script>

</head>

<body class="dx-viewport">
    <div id="app-side-nav-outer-toolbar">
        <div class="layout-header">

            @(Html.DevExtreme().Toolbar()
        .ID("toolbar")
        // .Visible(false)
        .Items(items => {
            items.Add()
                .Widget(w => w
                    .Button()
                    .Icon("menu")

                    .OnClick("DevExtremeAspNetCoreApp11.onMenuButtonClick")
                )

                .Location(ToolbarItemLocation.Before)
                .CssClass("menu-button");
            items.Add()
                .Html("<div>STOCK JESS PG</div>")
                .Location(ToolbarItemLocation.Before)
                .CssClass("header-title");

            //items.Add()
            //   .Html("<div>User:</div>")
            //   .Location(ToolbarItemLocation.After)
            //    .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
            //   .CssClass("header-title");

            items.Add()

                  //.Visible(false)
                  .Html(new JS ("UsernameDisplay"))
                  .Location(ToolbarItemLocation.After)
                  .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                  .CssClass("header-title");

            items.Add()
               .Widget(w => w
                   .Button()
                   .ID("LogIn")
                   .Text("Login")
                   .Icon("fas fa-user-secret")
                   .OnClick(@<text>function() {  $("#ToobarLoginPopup").dxPopup("show")}</text>)
               )

                 .Location(ToolbarItemLocation.After)
                 .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
                .CssClass("Login-logout-button");

            items.Add()
             .Widget(w => w

                 .Button()

                 .ID("LogOut")
                 .Visible(false)
                 .Text("LogOut")
                 .Icon("fas fa-user-secret")
                 .OnClick("Remove_Token")
             )
               .Location(ToolbarItemLocation.After)
               .LocateInMenu(ToolbarItemLocateInMenuMode.Auto)
               .CssClass("Login-logout-button");


        })



            )
        </div>
        <div class="layout-body layout-body-hidden">
            @(Html.DevExtreme().Drawer()
                .ID("layout-drawer")
                .Position(DrawerPosition.Left)
                .Opened(new JS("DevExtremeAspNetCoreApp11.restoreDrawerOpened()"))
                .Content(@<text>
                    <div id="layout-drawer-scrollview" class="with-footer">
                        <div class="content">
                            @RenderBody()
                        </div>
                        <div class="content-block">
                            <div class="content-footer">
                                <div id="footer">
                                    Copyright (c) 2020 Razis Inc.
                                    <br />
                                    All trademarks or registered trademarks are property of their respective owners.
                                </div>
                            </div>
                        </div>
                    </div>
                </text>)
                .Template(new TemplateName("navigation-menu"))
            )
        </div>
    </div>
    

    @using (Html.DevExtreme().NamedTemplate("navigation-menu"))
    {
        <div class="menu-container dx-swatch-additional">

            @functions{
                string GetUrl(string pageName) => Url.Page(pageName);
                string GetCurrentUrl() => Url.Page(ViewContext.RouteData.Values["page"].ToString());
                bool IsCurrentUrl(string pageName) => GetUrl(pageName) == GetCurrentUrl();
            }

            @(Html.DevExtreme().TreeView()
                .Items(items => {
                    items.Add()
                        .Text("Dashboard")
                        .Icon("flaticon-speedometer")
                        .Option("path", GetUrl("Index"))
                        .Selected(IsCurrentUrl("Index"));

                    items.Add()
                               .Text("CAPACITOR")
                               .Icon("flaticon-capacitor")
                               .Option("path", GetUrl("CAPACITOR"))
                               .Selected(IsCurrentUrl("CAPACITOR"));
                    items.Add()

                              .Text("DIODE")
                              .Icon("flaticon-diode")
                               .Option("path", GetUrl("DIODE"))
                              .Selected(IsCurrentUrl("DIODE"));
                    items.Add()

                                .Text("IC")
                                .Icon("flaticon-Ic")
                                .Option("path", GetUrl("IC"))
                                .Selected(IsCurrentUrl("IC"));
                    items.Add()
                               .Text("LCD")
                               .Icon("flaticon-lcd")
                               .Option("path", GetUrl("LCD"))
                               .Selected(IsCurrentUrl("LCD"));
                    items.Add()
                                .Text("MODULE")
                                .Icon("flaticon-pcb-board")
                                .Option("path", GetUrl("MODULE"))
                                .Selected(IsCurrentUrl("MODULE"));
                    items.Add()
                               .Text("MOSFET")
                               .Icon("flaticon-Mosfet")
                               .Option("path", GetUrl("MOSFET"))
                               .Selected(IsCurrentUrl("MOSFET"));
                    items.Add()
                                .Text("OPTOCOUPLER")
                                .Icon("flaticon-Optocoupler")
                                .Option("path", GetUrl("OPTOCOUPLER"))
                                .Selected(IsCurrentUrl("OPTOCOUPLER"));
                    items.Add()
                               .Text("RESISTOR")
                               .Icon("flaticon-resistor")
                               .Option("path", GetUrl("RESISTOR"))
                               .Selected(IsCurrentUrl("RESISTOR"));
                    items.Add()
                           .Text("TRANSISTOR")
                           .Icon("flaticon-transistor-1")
                           .Option("path", GetUrl("TRANSISTOR"))
                           .Selected(IsCurrentUrl("TRANSISTOR"));
                    items.Add()
                      .Text("About")
                      .Icon("flaticon-about")
                      .Option("path", GetUrl("About"))
                      .Selected(IsCurrentUrl("About"));
                })

                .ExpandEvent(TreeViewExpandEvent.Click)
                .SelectionMode(NavSelectionMode.Single)
                .SelectedExpr("selected")
                .FocusStateEnabled(false)
                .Width(250)
                .OnItemClick("DevExtremeAspNetCoreApp11.onTreeViewItemClick")
            )
        </div>
    }
    @(Html.DevExtreme().Popup()
        .ShowTitle(true)
        .Title("Login")
     .ContentTemplate(@<text>
<div class="form">
    <div class="dx-fieldset">
        <div class="dx-field">
            <div class="dx-field-label">Usernames</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TextBox()
                    .ID("USERNAMEtoolbar")
                   .Placeholder("Enter Username here...")
                    .ValueChangeEvent("keyup")

                )

            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Passwords</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TextBox()
                    .ID("PASSWORDtoolbar")
                    .Mode(TextBoxMode.Password)
                    .Placeholder("Enter Password here...")
                     .OnValueChanged("showeyeToolbar")
                     .ValueChangeEvent("keyup")
                     .Buttons(buttons =>
                     {
                buttons.Add()
                .Name("show_password")
                .Location(TextEditorButtonLocation.After)
                .Widget(w => w.Button()
                    .ID("show_password")
                    .Visible(false)
                    .Type(ButtonType.Normal)
                    .StylingMode(ButtonStylingMode.Text)
                    .Icon("fas fa-eye")
                    .OnClick("show_password"));

            buttons.Add()
                .Name("hide_password")
                .Location(TextEditorButtonLocation.After)
                .Widget(w => w.Button()
                    .ID("hide_password")
                    .Visible(false)
                    .Icon("fas fa-eye-slash")
                    .OnClick("hide_password"));
        })


                )
            </div>
        </div>
    </div>
</div>

</text>).ID("ToobarLoginPopup")
.ToolbarItems(toolbarItems =>
{
    toolbarItems.Add()

    .Location(ToolbarItemLocation.After)
    .Toolbar(Toolbar.Bottom)
                .Widget(w => w
                   .Button()
                   .Text("Close")

                   .OnClick(@<text>function() {  $("#ToobarLoginPopup").dxPopup("hide")}</text>)
                );
    toolbarItems.Add()

    .Location(ToolbarItemLocation.Center)
    .Toolbar(Toolbar.Bottom)
                .Widget(w => w
                   .Button()
                   .Text("Login")
                    .ID("loginbtn")
                   .OnClick("Toolbarlogin")
                );
})
    //.Position(pos => pos
    //    .My(HorizontalAlignment.Center, VerticalAlignment.Center)
    //    .At(HorizontalAlignment.Center, VerticalAlignment.Center)
    //    .Of("#Windows")
    //)
.Height(350)
.Width(364)
)
    <script>

        //function show_password() {
        //    var passwordEditor = $("#PASSWORDtoolbar").dxTextBox("instance");
        //    passwordEditor.option("mode", passwordEditor.option("mode") === "text" ? "password" : "text");

        //    $("#show_password").dxButton("instance").option("visible", false);
        //    $("#hide_password").dxButton("instance").option("visible", true);

        //}
        //function hide_password() {
        //    var passwordEditor = $("#PASSWORDtoolbar").dxTextBox("instance");

        //    passwordEditor.option("mode", passwordEditor.option("mode") === "text" ? "password" : "text");
        //    $("#show_password").dxButton("instance").option("visible", true);
        //    $("#hide_password").dxButton("instance").option("visible", false);

        //}

        function showeyeToolbar() {
            var pass = $("#PASSWORDtoolbar").dxTextBox("instance").option("value")
            var passwordEditor = $("#PASSWORDtoolbar").dxTextBox("instance");
            var passCondition = passwordEditor.option("mode")
            if (pass != "" && passCondition === "password") {
                $("#show_password").dxButton("instance").option("visible", true);
            }
            else if (pass != "" && passCondition === "text") {

                $("#hide_password").dxButton("instance").option("visible", true);
            }
            else {

                $("#show_password").dxButton("instance").option("visible", false);
                $("#hide_password").dxButton("instance").option("visible", false);
            }
        }

        function show_password() {
            var passwordEditor = $("#PASSWORDtoolbar").dxTextBox("instance");
            passwordEditor.option("mode", passwordEditor.option("mode") === "text" ? "password" : "text");

            $("#show_password").dxButton("instance").option("visible", false);
            $("#hide_password").dxButton("instance").option("visible", true);

        }

        function hide_password() {
            var passwordEditor = $("#PASSWORDtoolbar").dxTextBox("instance");

            passwordEditor.option("mode", passwordEditor.option("mode") === "text" ? "password" : "text");
            $("#show_password").dxButton("instance").option("visible", true);
            $("#hide_password").dxButton("instance").option("visible", false);

        }
        function Toolbarlogin() {

            var user = $("#USERNAMEtoolbar").dxTextBox("instance").option("value")
            var pass = $("#PASSWORDtoolbar").dxTextBox("instance").option("value")

            var settings = {

                "url": "/users/authenticate",
                "method": "POST",
                "timeout": 0,
                "headers": {

                    "Content-Type": "application/json"
                },
                statusCode: {

                    200: function () {

                        window.location.href = window.location;
                    }
                },
                "data": JSON.stringify({ "username": user, "password": pass }),

            };


            $.ajax(settings).done(function (data) {


                sessionStorage.setItem("Token", data.Token);
                sessionStorage.setItem("Role", data.Role);
                sessionStorage.setItem("Username", data.Username);

                DevExpress.ui.notify({
                    message: "Success Login, Hello! " + sessionStorage.getItem("Username"),
                    position: { my: "top", at: "top", of: $('#Windows') },
                    width: 300,
                    shading: false
                }, "Success", 5000);


            })
                .fail(function (data) {

                    DevExpress.ui.notify({
                        message: "Username or Password is invalid",
                        position: { my: "top", at: "top", of: $('#Windows') },
                        width: 300,
                        shading: false
                    }, "error", 5000);

                    //window.location.href = window.location;



                });








        }

        function UsernameDisplay() {

            if (sessionStorage.getItem("Token") != null) {
                toolbar
                return "Hello! " + sessionStorage.getItem("Username")
            }
            else {
                return ""
            }
        };
        function Remove_Token() {


            sessionStorage.removeItem("Token")
            sessionStorage.removeItem("Username")
            sessionStorage.removeItem("Role")
            window.location.href = window.location;

        };
        //function getitem() {

        //    $("#toolbar").dxToolbar({
        //        items: [
        //            {
        //                text: 'Add',
        //                location: 'after'
        //            }]
        //    })("instance");

        //};
        $(function () {
         
            
            

            if (sessionStorage.getItem("Token") != null) {

                $("#LogOut").dxButton("instance").option("visible", true);
                $("#LogIn").dxButton("instance").option("visible", false);
                
                var timer;
                document.onmousemove = resetTimer;
                document.onkeypress = resetTimer;
                

                function resetTimer() {
                    clearTimeout(timer);
                    timer = setTimeout(Remove_Token, 600000)
                    
                }
            }



        });

        var DevExtremeAspNetCoreApp11 = (function () {

            var DRAWER_OPENED_KEY = "DevExtremeAspNetCoreApp11-drawer-opened";

            var breakpoints = {
                xSmallMedia: window.matchMedia("(max-width: 599.99px)"),
                smallMedia: window.matchMedia("(min-width: 600px) and (max-width: 959.99px)"),
                mediumMedia: window.matchMedia("(min-width: 960px) and (max-width: 1279.99px)"),
                largeMedia: window.matchMedia("(min-width: 1280px)")
            };

            function getDrawer() {
                return $("#layout-drawer").dxDrawer("instance");
            }

            //function restoreDrawerOpened() {
            //    var isLarge = breakpoints.largeMedia.matches;
            //    if (!isLarge)
            //        return false;
            //    if (isLarge)
            //        return true;
            //    var state = sessionStorage.getItem(DRAWER_OPENED_KEY);
            //    if (state === null)
            //        return isLarge;
            //    return state === "true";



            //}

            function restoreDrawerOpened() {
                var isLarge = breakpoints.largeMedia.matches;
                if (!isLarge)
                    return false;

                var state = sessionStorage.getItem(DRAWER_OPENED_KEY);
                if (state === null)
                    return isLarge;

                return state === "true";
            }

            function saveDrawerOpened() {
                sessionStorage.setItem(DRAWER_OPENED_KEY, getDrawer().option("opened"));
            }

            function updateDrawer() {
                var isXSmall = breakpoints.xSmallMedia.matches,
                    isLarge = breakpoints.largeMedia.matches;

                getDrawer().option({
                    openedStateMode: isLarge ? "shrink" : "overlap",
                    revealMode: isXSmall ? "slide" : "expand",
                    minSize: isXSmall ? 0 : 60,
                    shading: !isLarge,
                });
            }

            function init() {
                $("#layout-drawer-scrollview").dxScrollView({ direction: "vertical" });

                $.each(breakpoints, function (_, size) {
                    size.addListener(function (e) {
                        if (e.matches)
                            updateDrawer();
                    });
                });

                updateDrawer();

                $('.layout-body').removeClass('layout-body-hidden');
            }

            function navigate(url, delay) {
                if (url)
                    setTimeout(function () { location.href = url }, delay);
            }

            function onMenuButtonClick() {
                getDrawer().toggle();
                saveDrawerOpened();
            }

            function onTreeViewItemClick(e) {
                var drawer = getDrawer();
                var savedOpened = restoreDrawerOpened();
                var actualOpened = drawer.option("opened");

                if (!actualOpened) {
                    drawer.show();
                } else {
                    var willHide = !savedOpened || !breakpoints.largeMedia.matches;
                    var willNavigate = !e.itemData.selected;

                    if (willHide)
                        drawer.hide();

                    if (willNavigate)
                        navigate(e.itemData.path, willHide ? 400 : 0);
                }
            }

            return {
                init: init,
                restoreDrawerOpened: restoreDrawerOpened,
                onMenuButtonClick: onMenuButtonClick,
                onTreeViewItemClick: onTreeViewItemClick
            };
        })();

        document.addEventListener("DOMContentLoaded", function documentReady() {
            this.removeEventListener("DOMContentLoaded", documentReady);
            DevExtremeAspNetCoreApp11.init();
        });
    </script>
</body>

</html>
